sourceSets.main.resources.srcDirs = ["assets"]

project.ext.mainClassName = "com.gempukku.gdx.assistant.DesktopLauncher"
project.ext.assetsDir = new File("assets")

import com.badlogic.gdx.graphics.Texture
import com.badlogic.gdx.tools.texturepacker.TexturePacker
import org.gradle.internal.os.OperatingSystem

dependencies {
    api project(":gdx-plugins")
    api project(":gdx-assistant-plugin")

    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.github.MarcinSc.gdx-gemp-lib:gdx-gemp-ui:$gdxGempLibVersion"
    implementation "com.kotcrab.vis:vis-ui:$visUiVersion"

    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
}

def assistantPlugins = [
        "https://jitpack.io/com/github/MarcinSc/gdx-graph/gdx-graph-assistant/${gdxGraphVersion}/gdx-graph-assistant-${gdxGraphVersion}.jar"
]

build {
    def folder = new File("plugins");
    folder.mkdirs();

    for (def assPlugin : assistantPlugins) {
        def f = new File("plugins/" + assPlugin.substring(assPlugin.lastIndexOf("/") + 1));
        if (!f.exists()) {
            println("Downloading plugin: " + assPlugin);
            new URL(assPlugin).withInputStream { i -> f.withOutputStream { it << i } }
        }
    }
}

task run(dependsOn: classes, type: JavaExec) {
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // Required to run on macOS
        jvmArgs += "-XstartOnFirstThread"
    }
}

task debug(dependsOn: classes, type: JavaExec) {
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

dist.dependsOn classes

tasks.register('texturePacking') {
    if (project.ext.has('texturePacker')) {
        TexturePacker.Settings settings = new TexturePacker.Settings()
        settings.grid = false
        settings.maxWidth = 2048
        settings.maxHeight = 2048
        settings.stripWhitespaceX = true
        settings.stripWhitespaceY = true
        settings.filterMin = Texture.TextureFilter.Nearest
        settings.filterMag = Texture.TextureFilter.Nearest

        for (int i = 0; i < texturePacker.size(); i += 3) {
            println("Calling TexturePacker: " + texturePacker[i + 2])
            TexturePacker.process(settings, texturePacker[i + 0], texturePacker[i + 1], texturePacker[i + 2])
        }
    }
}

eclipse.project.name = "gdx-assistant-desktop"
